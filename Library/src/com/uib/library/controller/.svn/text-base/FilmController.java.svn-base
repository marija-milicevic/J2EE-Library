package com.vicert.library.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.vicert.library.model.AuthorModel;
import com.vicert.library.model.BookModel;
import com.vicert.library.model.FileModel;
import com.vicert.library.model.GridModel;
import com.vicert.library.service.BookServiceApi;
import com.vicert.library.service.UserServiceApi;

@Controller
@SessionAttributes(value = {"usr","regList","bookList","authorList","grid"})
public class BookController {
	
	@Autowired
	private BookServiceApi bookServiceApi;
	@Autowired
	private UserServiceApi userServiceApi;
	@Autowired
	private BookValidator bookValidator;
	
	@ModelAttribute("bookModel")
	public BookModel createBook() {
		return new BookModel();
	}
	@ModelAttribute("authorModel")
	public AuthorModel createAuthor() {
		return new AuthorModel();
	}
	
	//------------ AUTHORS MANAGMENT SECTION ------------
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/authorManagmentPage")
	public ModelAndView goToAuthorManagmentPage(){
		return new ModelAndView("authorManagment");
	}
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/authorManagment")
	public ModelAndView listAllAuthors(@ModelAttribute("grid")GridModel grid){
		ModelAndView modelAndView = new ModelAndView("authorManagment");				
		//+++ Paging and sorting +++
		grid = new GridModel();
		editGrid(bookServiceApi.getNumOfAuthors(), "authorManagment", grid);
		grid.setCmpString("athrNm");
		modelAndView.addObject("grid", grid);
		List<AuthorModel> authorList = bookServiceApi.getAuthorsByGrid(grid);
		modelAndView.addObject("authorList", authorList);
		return modelAndView;				
	}
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/singleAuthorPage")	                 
	public ModelAndView goToSingleAuthorPage(@ModelAttribute("authorModel") AuthorModel authorModel,boolean isNew){
		ModelAndView modelAndView = new ModelAndView("singleAuthor");
		modelAndView.addObject("isNew",isNew);
		if(isNew){			
			return modelAndView;
		}
		authorModel=bookServiceApi.getAuthorModelByAuthorId(authorModel.getAthrId());	
		if(authorModel==null){
			modelAndView.addObject("singleAuthorErr" , "Author doesn't exist , redirected to create page !");
			modelAndView.addObject("isNew", true);
			return modelAndView;
		}
		modelAndView.addObject("snglAthr", authorModel);
		return modelAndView;
	}
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/singleAuthor")	                 
	public ModelAndView changeAuthor(@ModelAttribute("authorModel") AuthorModel authorModel,BindingResult result,boolean isNew,@ModelAttribute("grid") GridModel grid){
		ModelAndView modelAndView = new ModelAndView();
		bookValidator.validateAuthor(authorModel, result, isNew);
		if(result.hasErrors()){
			modelAndView.addObject("snglAthr", authorModel);
			modelAndView.addObject("isNew", isNew);
			modelAndView.setViewName("singleAuthor");
			modelAndView.addObject("singleAuthorErr" , bookValidator.getErrMessage());
			return modelAndView;
		}
		modelAndView.setViewName("authorManagment");
		if(isNew){
			bookServiceApi.insertAuthor(authorModel);
			editGrid(grid.getItems()+1, "authorManagment", grid);
		}		
		else{
			bookServiceApi.updateAuthor(authorModel);
		}		
		List<AuthorModel> authorList = bookServiceApi.getAuthorsByGrid(grid);
		modelAndView.addObject("authorList", authorList);
		//+++ Paging and sorting +++	
		modelAndView.addObject("grid", grid);
		return modelAndView;
	} 	
	
	@PreAuthorize("hasRole('administrator')")	
	@RequestMapping("/deleteAuthor")	
	public ModelAndView deleteAuthor(@ModelAttribute("authorModel") AuthorModel authorModel,@ModelAttribute("grid") GridModel grid){
		ModelAndView modelAndView = new ModelAndView("authorManagment");	
		try{
		bookServiceApi.delteAuthorById(authorModel.getAthrId());
		editGrid(grid.getItems()-1, "authorManagment", grid);
		}catch (IllegalArgumentException e) {
			modelAndView.addObject("deleteAuthorErr" , "Can't delete author , author already deleted !");
		}catch (DataIntegrityViolationException e) {
			modelAndView.addObject("deleteAuthorErr" , "Can't delete author , delete all of his books first !");
		}		
		if(grid.getItems()%5==0  && grid.getPageNumber()>0){
			grid.setPageNumber(grid.getPageNumber()-1);
		}
		List<AuthorModel> authorList = bookServiceApi.getAuthorsByGrid(grid);
		modelAndView.addObject("authorList", authorList);
		//+++ Paging and sorting +++			
		modelAndView.addObject("grid", grid);
		return modelAndView;
	}
	
	//------------ BOOKS MANAGMENT SECTION ------------ 
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/bookManagmentPage")
	public ModelAndView goToBookManagmentPage(){
		return new ModelAndView("bookManagment");
	}
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/bookManagment")
	public ModelAndView listAllBooks(@ModelAttribute("grid")GridModel grid){
		ModelAndView modelAndView = new ModelAndView("bookManagment");					
		//+++ Paging and sorting +++
		grid = new GridModel();
		editGrid(bookServiceApi.getNumOfBooks(), "bookManagment", grid);
		grid.setCmpString("titl");
		modelAndView.addObject("grid", grid);
		List<BookModel> bookList = bookServiceApi.getBooksByGrid(grid);
		modelAndView.addObject("bookList", bookList);
		return modelAndView;
	}
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/singleBookPage")	                 
	public ModelAndView goToSingleBookPage(@ModelAttribute("bookModel") BookModel bookModel,boolean isNew){
		ModelAndView modelAndView = new ModelAndView("singleBook");	
		modelAndView.addObject("isNew",isNew);
		List<AuthorModel> list = bookServiceApi.getAllAuthors();
		modelAndView.addObject("athrList", list);
		if(isNew){			
			return modelAndView;
		}
		bookModel=bookServiceApi.getBookModelByBookId(bookModel.getBkId());	
		if(bookModel==null){
			modelAndView.addObject("singleBookErr" , "Book doesn't exist , redirected to create page !");
			modelAndView.addObject("isNew", true);
			return modelAndView;
		}
		modelAndView.addObject("snglBk", bookModel);		
		return modelAndView;
	}
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/singleBook")	                 
	public ModelAndView changeBook(@ModelAttribute("bookModel") BookModel bookModel,BindingResult result,boolean isNew,@ModelAttribute("grid") GridModel grid){
		ModelAndView modelAndView = new ModelAndView();
		bookValidator.validateBook(bookModel, result, isNew);
		if(result.hasErrors()){				
			List<AuthorModel> list = bookServiceApi.getAllAuthors();
			modelAndView.addObject("athrList", list);
			modelAndView.addObject("snglBk", bookModel);
			modelAndView.addObject("isNew", isNew);
			modelAndView.setViewName("singleBook");
			modelAndView.addObject("singleBookErr", bookValidator.getErrMessage());
			return modelAndView;
		}
		modelAndView.setViewName("bookManagment");
		if(isNew){
			bookServiceApi.insertBook(bookModel);
			editGrid(grid.getItems()+1, "bookManagment", grid);
		}		
		else{
			bookServiceApi.updateBook(bookModel);
		}			
		List<BookModel> bookList = bookServiceApi.getBooksByGrid(grid);		
		modelAndView.addObject("bookList", bookList);
		//+++ Paging and sorting +++	
		modelAndView.addObject("grid", grid);
		return modelAndView;
	} 	
	
	@PreAuthorize("hasRole('administrator')")
	@RequestMapping("/deleteBook")	
	public ModelAndView deleteBook(@ModelAttribute("bookModel") BookModel bookModel,boolean isNew,@ModelAttribute("grid") GridModel grid){
		ModelAndView modelAndView = new ModelAndView("bookManagment");	
		try{
		bookServiceApi.deleteBookById(bookModel.getBkId());
		editGrid(grid.getItems()-1, "bookManagment", grid);
		}catch (IllegalArgumentException e) {
		modelAndView.addObject("deleteBookErr" , "Can't delete book , book already deleted !");
		}catch (DataIntegrityViolationException e) {
		modelAndView.addObject("deleteBookErr" , "Can't delete book , someone rented it !");
		}	
		if(grid.getItems()%5==0  && grid.getPageNumber()>0){
			grid.setPageNumber(grid.getPageNumber()-1);
		}
		List<BookModel> bookList = bookServiceApi.getBooksByGrid(grid);
		modelAndView.addObject("bookList", bookList);
		//+++ Paging and sorting +++			
		modelAndView.addObject("grid", grid);
		return modelAndView;
	}
	
	//------------ BOOKS RENT SECTION ------------ 
	@RequestMapping("/bookRentPage")
	public ModelAndView listAvailableBooks(@ModelAttribute("grid")GridModel grid){
		ModelAndView modelAndView = new ModelAndView("bookRent");				
		//+++ Paging and sorting +++
		grid = new GridModel();
		editGrid(bookServiceApi.getNumOfAvailableBooks(),"bookRent", grid);
		grid.setCmpString("titl");
		modelAndView.addObject("grid", grid);
		List<BookModel> bookList = bookServiceApi.getAvailableBooksBooksByGrid(grid);
		modelAndView.addObject("bookList", bookList);
		return modelAndView;
	}
	
	@RequestMapping("/bookRent")
	public ModelAndView rentBook(int usrId,int bkId,int allBk,String bkImg,@ModelAttribute("grid")GridModel grid){
		ModelAndView modelAndView = new ModelAndView("bookRent");		
		if(allBk>0){
			if(bookServiceApi.rentBook(usrId, bkId)==0){
				modelAndView.addObject("rentInfo", "Book rented");
				modelAndView.addObject("rentImg" , bkImg);
				editGrid(grid.getItems()-1, "bookRent", grid);
			}
			else if(bookServiceApi.rentBook(usrId, bkId)==1){
				modelAndView.addObject("rentInfo", "Can't rent same book twice !");
			}			
			else if(bookServiceApi.rentBook(usrId, bkId)==2){
				modelAndView.addObject("rentInfo", "All copies gone , refresh page !");
			}
		}
		else{
			modelAndView.addObject("rentInfo", "Can't rent any more books !");
		}
		if(grid.getItems()%5==0  && grid.getPageNumber()>0){
			grid.setPageNumber(grid.getPageNumber()-1);
		}
		List<BookModel> bookList = bookServiceApi.getAvailableBooksBooksByGrid(grid);
		modelAndView.addObject("bookList", bookList);
		modelAndView.addObject("usr", userServiceApi.getUserModelByUserId(usrId));
		return modelAndView;
	}
	
	//------------ BOOKS RETURN SECTION ------------
	@RequestMapping("/bookReturn")
	public ModelAndView returnBook(int usrId){
		ModelAndView modelAndView = new ModelAndView("user");
		bookServiceApi.deleteRentsByUserId(usrId);
		modelAndView.addObject("usr",userServiceApi.getUserModelByUserId(usrId));
		return modelAndView;
	}			
	
	//------------ UPLOAD FILE SECTION ------------
	@RequestMapping("/uploadFile")
	public ModelAndView uploadFile(FileModel file,HttpServletRequest req){
		ModelAndView modelAndView = new ModelAndView("singleBook");	
		BookModel bookModel = new BookModel();
		try{					
			modelAndView.addObject("athrList",bookServiceApi.getAllAuthors());
			modelAndView.addObject("isNew", true);
			//If the book is updated
			if(!req.getParameter("bkId").equals("")){
				if(Integer.parseInt(req.getParameter("bkId"))!=0){
					bookModel = bookServiceApi.getBookModelByBookId(Integer.parseInt(req.getParameter("bkId")));					
					modelAndView.addObject("isNew", false);
				}
			}
			//Check if the file is image type	
			String fileName = file.getFile().getOriginalFilename();			
			if(fileName.length()!=0){				
				String ext = fileName.substring(fileName.lastIndexOf("."));
				if(ext.equals(".gif") || ext.equals(".jpg") || ext.equals(".jpeg") || ext.equals(".png")){
					bookModel.setImg("imgBooks/"+fileName);
					String parent = req.getSession().getServletContext().getRealPath("")+ "\\" + "imgBooks";									
					File f = new File(parent,fileName);
					file.getFile().transferTo(f);
					//*** Added to save file to project , not in tmp folder ***
						parent=parent.substring(0,parent.indexOf(".metadata"))+"Library\\docroot\\imgBooks";
						File f1 = new File(parent,fileName);
						InputStream in = new FileInputStream(f); 
						OutputStream out = new FileOutputStream(f1); 
						byte[] buf = new byte[1024]; 
						int len; 
						while ((len = in.read(buf)) > 0) { 
							out.write(buf, 0, len); 
						} 
						in.close(); 
						out.close(); 
					//**********************************************************
					modelAndView.addObject("uploadInfo","File uploaded");
				}
				else{
					modelAndView.addObject("uploadInfo","Type not supported(.gif .jpg .jpeg .png allowed)");
					bookModel.setImg(bookModel.getImg());
				}
			}
			else{
				modelAndView.addObject("uploadInfo","File not uploaded(no file selected)");
				bookModel.setImg(bookModel.getImg());
			}
			modelAndView.addObject("snglBk",bookModel);							
		}catch (Exception e) {
			e.printStackTrace();
			modelAndView.setViewName("error");
		}
		return modelAndView;
	}	

	//GETTERS AND SETTERS
	
	public void setBookServiceApi(BookServiceApi bookServiceApi) {
		this.bookServiceApi = bookServiceApi;
	}
	public BookServiceApi getBookServiceApi() {
		return bookServiceApi;
	}
	public void setUserServiceApi(UserServiceApi userServiceApi) {
		this.userServiceApi = userServiceApi;
	}
	public UserServiceApi getUserServiceApi() {
		return userServiceApi;
	}
	
	//UTILITES METHODS
	
	private void editGrid(int items,String retPage,GridModel grid){		
		grid.setItems(items);	
		grid.setPages(((int)Math.ceil((double)grid.getItems()/(double)grid.getItemsPerPage())-1));
		grid.setRetPage(retPage);
	}

}
